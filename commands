#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname $0)/../common/functions"

TYPE="$3"

CMD=$(cat <<EOF &&
pwd &&
cd "/app" &&
new_path="\$(find / -name npm | tail -1 | xargs -I % sh -c "dirname %")" &&
PATH="\$PATH:\$new_path" &&
PATH="\$PATH:\$(npm bin)" &&
npm install -g grunt &&
npm install -g grunt-cli &&
npm install -g bower &&
npm update &&
bower --allow-root install &&
bower --allow-root update &&
grunt build:$TYPE
EOF
)

case "$1" in
  grunt)
    [[ -z $2 ]] && echo "Please specify an app to run the command on" && exit 1
    verify_app_name "$2"
    APP="$2"
    IMAGE="dokku/$APP"
                                                                                
    if [[ -z $3 ]]; then
        echo "Usage: dokku grunt APP BUILDTYPE"
        exit 1
    fi 
    TYPE="$3"
    # Compile with Grunt
    echo "-----> Compiling with grunt build:$TYPE"

    #id=$(docker run -d $IMAGE /bin/bash -c "$CMD")
    #docker attach $id
    #test $(docker wait $id) -eq 0
    #docker commit $id $IMAGE > /dev/null

    echo "$CMD"

    echo 'docker run'
    ID=$(docker -D run -i -a stdin $IMAGE /bin/bash -c "$CMD")
    echo "$ID"
    dokku logs $ID
    #echo 'docker attach'
    #docker attach $ID
    echo 'docker wait'
    test $(docker wait $ID) -eq 0
    echo 'docker commit'
    docker commit $ID $IMAGE > /dev/null

    echo "-----> Finished commands"
    ;;

  help)
    cat && cat<<EOF
    grunt <app> <build_type>                        Use Grunt to build
EOF
    ;;

  *)
    exit $DOKKU_NOT_IMPLEMENTED_EXIT
    ;;

esac
